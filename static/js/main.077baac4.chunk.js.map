{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","users","page","mapfuncstr","reducefuncstr","job","addUser","bind","handleChange","message","onChangeMap","onChangeReduce","console","log","length","this","setState","id","Date","now","status","result","context","emit","event","target","name","value","data","type","res","eval","handler","fixed","inverted","Item","as","header","text","style","marginTop","fluid","color","Group","widths","placeholder","mode","theme","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Button","primary","onClick","calistir","celled","Header","Row","HeaderCell","Body","slice","map","item","index","d","tarih","key","Cell","toDateString","toTimeString","durum","Footer","colSpan","floated","pagination","icon","prevPage","nextPage","React","Component","contextType","SocketContext","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","uri","options","transports","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.077baac4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Event, SocketContext } from 'react-socket-io';\nimport { Fragment } from 'react';\nimport {\n  Container,\n  Menu,\n  Card,\n  Table,\n  Label,\n  Icon,\n  Form,\n} from 'semantic-ui-react'\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\n\nclass App extends React.Component {\n  state = {\n    users: [],\n    page: 0,\n    mapfuncstr: `function map(data){\n      // reduce edilecek konuzu bu kısma yazınız\n      jobs[jobindex].result= jobs[jobindex].result*data;\n    }`,\n    reducefuncstr: `function reduce(data){\n      var result = 1;\n      for(var i=1;i<10;i++){\n        result *=i ;\n      }\n      return result;\n    }`,\n    job: null\n  }\n\n  constructor(props) {\n    super(props);\n    this.addUser = this.addUser.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.message = this.message.bind(this);\n    this.onChangeMap = this.onChangeMap.bind(this);\n    this.onChangeReduce = this.onChangeReduce.bind(this);\n  }\n\n  addUser(users) {\n    console.log('users', users.length, users)\n    this.setState({ users })\n  }\n  prevPage() {\n    if ((this.state.page - 1) >= 0) {\n      this.setState({ page: --this.state.page })\n    }\n  }\n  nextPage() {\n    if ((this.state.page + 1) < this.state.users.length / 10) {\n      this.setState({ page: ++this.state.page })\n    }\n  }\n\n  calistir() {\n    var job = {\n      id: Date.now(),\n      mapfuncstr: this.state.mapfuncstr,\n      reducefuncstr: this.state.reducefuncstr,\n      status: 'Hazır',\n      result: 1\n    };\n    this.context.emit('map', job)\n    this.setState({ job })\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  onChangeMap(mapfuncstr) {\n    this.setState({ mapfuncstr })\n  }\n\n  onChangeReduce(reducefuncstr) {\n    this.setState({ reducefuncstr })\n  }\n\n  message(data) {\n    switch (data.type) {\n      case 'run':\n        console.log(\"message\", data)\n        var res = eval(data.reducefuncstr + 'reduce()')\n        console.log(res)\n        this.context.emit('reduce', { id: data.id, data: res });\n        break;\n      case 'jobupdate':\n        console.log(\"jobupdate\", data)\n        this.setState({ job: data.job })\n        break;\n\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Event event='users' handler={this.addUser} />\n        <Event event='message' handler={this.message} />\n        <Menu fixed='top' inverted>\n          <Container>\n            <Menu.Item as='a' header>\n              Map And Reduce\n        </Menu.Item>\n            <Menu.Item as='a'>Anasayfa</Menu.Item>\n          </Container>\n        </Menu>\n\n        <Container text style={{ marginTop: '7em' }}>\n          <Card fluid color='green' header={this.state.job ? this.state.job.status + '\\n Sonuç : ' + this.state.job.result : 'Bağlantı Hazır'} />\n\n          <Form>\n            <Form.Group widths='equal'>\n              <AceEditor\n                placeholder=\"Reduce\"\n                mode=\"javascript\"\n                theme=\"monokai\"\n                name=\"reduce\"\n                onChange={this.onChangeReduce}\n                fontSize={14}\n                showPrintMargin={true}\n                showGutter={true}\n                highlightActiveLine={true}\n                value={this.state.reducefuncstr}\n                setOptions={{\n                  enableBasicAutocompletion: true,\n                  enableLiveAutocompletion: true,\n                  enableSnippets: true,\n                  showLineNumbers: true,\n                  tabSize: 2,\n                }} />\n              <AceEditor\n                placeholder=\"Map\"\n                mode=\"javascript\"\n                theme=\"monokai\"\n                name=\"map\"\n                onChange={this.onChangeMap}\n                fontSize={14}\n                showPrintMargin={true}\n                showGutter={true}\n                highlightActiveLine={true}\n                value={this.state.mapfuncstr}\n                setOptions={{\n                  enableBasicAutocompletion: true,\n                  enableLiveAutocompletion: true,\n                  enableSnippets: true,\n                  showLineNumbers: true,\n                  tabSize: 2,\n                }} />\n            </Form.Group>\n            <Form.Button primary onClick={() => this.calistir()}>Çalıştır</Form.Button>\n          </Form>\n\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Bağlantı Adı</Table.HeaderCell>\n                <Table.HeaderCell>Bağlantı Tarihi</Table.HeaderCell>\n                <Table.HeaderCell>Bağlantı Durumu</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {\n                this.state.users.slice(this.state.page * 10, (this.state.page * 10) + 10).map((item, index) => {\n                  var d = new Date(item.tarih);\n                  return (\n                    <Table.Row key={'table_row_' + index}>\n                      <Table.Cell>\n                        {item.id}\n                      </Table.Cell>\n                      <Table.Cell>{\n                        d.toDateString() + \" \" + d.toTimeString()\n                      }</Table.Cell>\n                      <Table.Cell>\n                        {item.durum}\n                      </Table.Cell>\n                    </Table.Row>\n                  )\n                })\n              }\n            </Table.Body>\n\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan='4'>\n                  <Menu floated='right' pagination>\n                    <Label>Sayfa : {this.state.page + 1} | Bağlantı Sayısı : {this.state.users.length}</Label>\n                    <Menu.Item as='a' icon onClick={() => this.prevPage}>\n                      <Icon name='chevron left' />\n                    </Menu.Item>\n                    <Menu.Item as='a' icon onClick={() => this.nextPage} >\n                      <Icon name='chevron right' />\n                    </Menu.Item>\n                  </Menu>\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        </Container>\n\n      </Fragment >\n    );\n  }\n}\nApp.contextType = SocketContext\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Socket } from 'react-socket-io';\nconst uri = 'https://socket.necmettincimen.com';\nconst options = { transports: ['websocket'] };\n\nReactDOM.render(\n  <React.StrictMode>\n    <Socket uri={uri} options={options}>\n      <App />\n    </Socket>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}