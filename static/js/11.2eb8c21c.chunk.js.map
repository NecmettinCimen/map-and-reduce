{"version":3,"sources":["App/components/MainCard.js","store/services/BaseService.js","store/services/Job.js","App/components/UcFirst.js","Project/Jobs/NewJob.js"],"names":["MainCard","Component","constructor","arguments","state","isOption","this","props","isCardRight","cardRight","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","render","fullScreenStyle","loader","cardHeader","cardHeaderRight","card","cardClass","React","createElement","className","Dropdown","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Card","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","Collapse","in","Body","children","Aux","windowSize","baseUrl","baseService","post","async","url","model","response","fetch","concat","method","headers","body","JSON","stringify","status","success","errorMsg","json","get","put","delete","jobService","getall","UcFirst","string","text","charAt","toUpperCase","slice","NewJob","super","name","mapfuncstr","reducefuncstr","exmessage","loading","isedit","getJob","result","JobService","data","mapFuncStr","reduceFuncStr","handleOnSubmit","handleOnDelete","handleOnChange","bind","componentDidMount","location","pathname","split","length","pathnames","idstr","parseInt","event","target","value","Row","Col","Alert","variant","Link","to","Button","Form","Group","Control","onChange","rows"],"mappings":"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","file":"static/js/11.2eb8c21c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Card, Collapse } from 'react-bootstrap';\nimport windowSize from 'react-window-size';\n\nimport Aux from \"../../hoc/_Aux\";\nimport DEMO from \"../../store/constant\";\n\nclass MainCard extends Component {\n    state = {\n        isOption: this.props.isOption,\n        isCardRight: this.props.isCardRight || false,\n        cardRight: this.props.cardRight || null,\n        fullCard: false,\n        collapseCard: false,\n        loadCard: false,\n        cardRemove: false\n    };\n\n    cardReloadHandler = () => {\n        this.setState({ loadCard: true });\n        setInterval(() => {\n            this.setState({ loadCard: false });\n        }, 3000);\n    };\n\n    cardRemoveHandler = () => {\n        this.setState({ cardRemove: true });\n    };\n\n    render() {\n        let fullScreenStyle, loader, cardHeaderRight = this.state.cardRight, cardHeader;\n        let card = '';\n        let cardClass = [];\n\n        if (this.state.isOption) {\n            cardHeaderRight = (\n                <div className=\"card-header-right\">\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\n                            <i className=\"feather icon-more-horizontal\" />\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => { this.setState(prevState => { return { fullCard: !prevState.fullCard } }) }}>\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'} />\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restore' : 'Maximize'} </a>\n                            </Dropdown.Item>\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => { this.setState(prevState => { return { collapseCard: !prevState.collapseCard } }) }}>\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'} />\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expand' : 'Collapse'} </a>\n                            </Dropdown.Item>\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\n                                <i className='feather icon-refresh-cw' />\n                                <a href={DEMO.BLANK_LINK}> Reload </a>\n                            </Dropdown.Item>\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\n                                <i className='feather icon-trash' />\n                                <a href={DEMO.BLANK_LINK}> Remove </a>\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            );\n        } else if (this.state.isCardRight) {\n            cardHeaderRight = (\n                <div className=\"card-header-right\">\n                    {cardHeaderRight}\n                </div>\n            );\n        }\n\n        cardHeader = (\n            <Card.Header>\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\n                {cardHeaderRight}\n            </Card.Header>\n        );\n\n        if (this.state.fullCard) {\n            cardClass = [...cardClass, 'full-card'];\n            fullScreenStyle = { position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight };\n        }\n\n        if (this.state.loadCard) {\n            cardClass = [...cardClass, 'card-load'];\n            loader = (\n                <div className=\"card-loader\">\n                    <i className=\"pct-loader1 anim-rotate\" />\n                </div>\n            );\n        }\n\n        if (this.state.cardRemove) {\n            cardClass = [...cardClass, 'd-none'];\n        }\n\n        if (this.props.cardClass) {\n            cardClass = [...cardClass, this.props.cardClass];\n        }\n\n        card = (\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\n                {cardHeader}\n                <Collapse in={!this.state.collapseCard}>\n                    <div>\n                        <Card.Body>\n                            {this.props.children}\n                        </Card.Body>\n                    </div>\n                </Collapse>\n                {loader}\n            </Card>\n        );\n\n        return (\n            <Aux>\n                {card}\n            </Aux>\n        );\n    }\n}\n\nexport default windowSize(MainCard);\n","var baseUrl = \"https://map-and-reduce.necmettincimen.xyz\"\n\nvar baseService = {\n    post: async (url, model) => {\n        var response = await fetch(`${baseUrl}/${url}`, { method: 'post', headers: { 'content-type': 'application/json' }, body: JSON.stringify(model) })\n        if (response.status === 400) {\n            return {\n                success:false,\n                errorMsg:'Lütfen Girdiğiniz Bilgileri Kontrol Ediniz.'\n            }\n        }else if (response.status === 500) {\n            return {\n                success:false,\n                errorMsg:'Sunucu Hatası Lütfen Data Sonra Tekrar Deneyiniz.'\n            }\n        } else {\n            var result = await response.json();\n            return result;\n        }\n    },\n    get: async (url) => {\n        var response = await fetch(`${baseUrl}/${url}`, { method: 'get', headers: { 'content-type': 'application/json' } })\n        var result = await response.json();\n        return result;\n    },\n    put: async (url, model) => {\n        var response = await fetch(`${baseUrl}/${url}`, { method: 'put', headers: { 'content-type': 'application/json' }, body: JSON.stringify(model) })\n        var result = await response.json();\n        return result;\n    },\n    delete: async (url) => {\n        var response = await fetch(`${baseUrl}/${url}`, { method: 'delete', headers: { 'content-type': 'application/json' } })\n        var result = await response.json();\n        return result;\n    }\n}\n\nexport default baseService;","import baseService from './BaseService';\n\nvar jobService = {\n    post: async (model) => {\n        var result = await baseService.post('job', model);\n        return result;\n    },\n    getall: async () => {\n        var result = await baseService.get('job');\n        return result;\n    },\n    get: async (id) => {\n        var result = await baseService.get(`job/${id}`);\n        return result;\n    },\n    put: async (model) => {\n        var result = await baseService.put(`job`, model);\n        return result;\n    },\n    delete: async (id) => {\n        var result = await baseService.delete(`job/${id}`);\n        return result;\n    },\n}\n\nexport default jobService;","import React from 'react';\n\nclass UcFirst extends React.Component {\n    render() {\n        const string = this.props.text;\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n}\n\nexport default UcFirst;","import React, { Component } from 'react';\nimport { Alert, Row, Col, Form, Button } from 'react-bootstrap';\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport UcFirst from '../../App/components/UcFirst';\n\nimport JobService from '../../store/services/Job'\nimport { Link } from 'react-router-dom';\n\nclass NewJob extends Component {\n\n    state = {\n        id: 0,\n        name: 'İş ismi',\n        mapfuncstr: `function map(data, index){\n            // map edilecek konuzu bu kısma yazınız\n            var result = 1;\n            for(var i=1;i<50*index;i++){\n              result *=i ;\n            }\n            return result;\n          }`,\n        reducefuncstr: `function reduce(data, oldresult){\n            // reduce edilecek konuzu bu kısma yazınız\n  if(oldresult==0){\n  oldresult=1;\n  }\n  \n           return oldresult*data;\n          }`,\n        success: null,\n        exmessage: '',\n        loading: false,\n        isedit: false\n    }\n\n    constructor() {\n        super()\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n        this.handleOnSubmit = this.handleOnSubmit.bind(this)\n    }\n\n    componentDidMount() {\n\n        if (this.props.location.pathname.split('/').length > 3) {\n            var pathnames = this.props.location.pathname.split('/');\n            var idstr = pathnames[pathnames.length - 1]\n            if (typeof (parseInt(idstr)) === \"number\") {\n                this.getJob(idstr);\n            }\n        }\n    }\n\n    getJob = async (id) => {\n        this.setState({ loading: true })\n        var result = await JobService.get(id)\n        this.setState({\n            id: result.data.id,\n            name: result.data.name,\n            mapfuncstr: result.data.mapFuncStr,\n            reducefuncstr: result.data.reduceFuncStr,\n            loading: false,\n            isedit: true\n        })\n    }\n\n    handleOnChange(event) {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n\n    handleOnSubmit = async () => {\n        this.setState({ loading: true })\n        var result = await JobService[this.state.isedit ? \"put\" : \"post\"]({\n            id: this.state.id,\n            name: this.state.name,\n            mapFuncStr: this.state.mapfuncstr,\n            reduceFuncStr: this.state.reducefuncstr\n        })\n        this.setState({ loading: false, success: result.success, exmessage: result.errorMsg })\n    }\n\n    handleOnDelete = async () => {\n        this.setState({ loading: true })\n        var result = await JobService.delete(this.state.id)\n        this.setState({ loading: false, success: result.success, exmessage: result.errorMsg })\n    }\n\n    render() {\n        return (\n            <Aux>\n                <Row>\n                    <Col>\n                        {!this.state.loading ? null : <Alert variant=\"primary\">Lütfen Bekleyin Bilgiler Sunucu Üzerinden getiriliyor.</Alert>}\n                        {this.state.success == null ? null : this.state.success ? <Alert variant=\"success\">Başarılı! İş Kayıt Edildi. <Link to=\"/jobs/list\">İş Listesine Git</Link></Alert> : <Alert variant=\"danger\">Başarısız! {this.state.exmessage}</Alert>}\n                        <Card title='Yeni Bir İş' isCardRight cardRight={\n                            <div>\n                                <Button variant='primary' onClick={this.handleOnSubmit}><UcFirst text=\"Kaydet\" /></Button>\n                                <Button variant='danger' onClick={this.handleOnDelete}><UcFirst text=\"Sil\" /></Button>\n                            </div>\n                        }>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Control as=\"input\" value={this.state.name} name=\"name\" onChange={this.handleOnChange} />\n                                </Form.Group>\n                            </Form>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Card title='Map' isOption>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Control as=\"textarea\" rows=\"9\" value={this.state.mapfuncstr} name=\"mapfuncstr\" onChange={this.handleOnChange} />\n                                </Form.Group>\n                            </Form>\n                        </Card>\n                    </Col>\n                    <Col>\n                        <Card title='Reduce' isOption>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Control as=\"textarea\" rows=\"9\" value={this.state.reducefuncstr} name=\"reducefuncstr\" onChange={this.handleOnChange} />\n                                </Form.Group>\n                            </Form>\n                        </Card>\n                    </Col>\n                </Row>\n            </Aux>\n        );\n    }\n}\n\nexport default NewJob;"],"sourceRoot":""}