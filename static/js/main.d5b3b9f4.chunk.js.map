{"version":3,"sources":["config.js","App/layout/Loader/index.js","hoc/_Aux/index.js","store/services/SocketService.js","store/actions.js","App/layout/ScrollToTop/index.js","route.js","App/index.js","serviceWorker.js","store/reducer.js","index.js"],"names":["defaultPath","basename","layout","preLayout","collapseMenu","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize","loader","React","createElement","className","Aux","props","children","ENDPOINT","SocketService","constructor","socket","io","socketDate","Date","socketName","instance","this","waitMessage","on","params","type","startDate","data","eval","mapfuncstr","time","getTime","getInstance","emit","id","meter","appVersion","navigator","deviceMemory","hardwareConcurrency","platform","getSocket","getSocketId","getSocketConnected","connected","getSocketDate","getSocketName","name","setSocketName","COLLAPSE_MENU","COLLAPSE_TOGGLE","FULL_SCREEN","FULL_SCREEN_EXIT","CHANGE_LAYOUT","NAV_CONTENT_LEAVE","NAV_COLLAPSE_LEAVE","ScrollToTop","Component","componentDidUpdate","prevProps","location","window","scrollTo","render","withRouter","route","path","exact","component","lazy","AdminLayout","Loadable","loading","Loader","App","menu","routes","map","index","Route","key","Suspense","fallback","Switch","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialState","_objectSpread","isOpen","isTrigger","isFullScreen","reducer","arguments","length","undefined","action","trigger","open","actionTypes","triggerIndex","indexOf","filter","item","store","createStore","app","Provider","BrowserRouter","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d5b3b9f4.chunk.js","sourcesContent":["export default {\n    defaultPath: '/dashboard/default',\n    basename: '/', // only at build time to set, like /datta-able\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\n    preLayout: null, // (not available in lite version)\n    collapseMenu: false, // mini-menu\n    layoutType: 'menu-light', // menu-dark, (menu-light, dark are not available in lite version)\n    navIconColor: false,\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\n    navBackImage: false, // not available in lite version\n    rtlLayout: false, // not available in lite version\n    navFixedLayout: true,\n    headerFixedLayout: false, // not available in lite version\n    boxLayout: false,\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\n    navListTitleHide: false, // not available in lite version\n    configBlock: false, // not available in lite version\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\n    layout6BackSize : '', // used only for pre-layout = layout-6\n};\n","import React from 'react';\n\nconst loader = () => {\n    return (\n        <div className=\"loader-bg\">\n            <div className=\"loader-track\">\n                <div className=\"loader-fill\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default loader;","const Aux = (props) => props.children;\n\nexport default Aux;","\n\nimport io from 'socket.io-client';\nconst ENDPOINT = \"https://map-and-reduce-socket.necmettincimen.xyz\";\n\nexport default class SocketService {\n    static instance = null;\n    socket = io(ENDPOINT);\n    socketDate = new Date();\n    socketName = null;\n    static getInstance() {\n        if (SocketService.instance === null) {\n            SocketService.instance = new SocketService();\n        }\n        return this.instance;\n    }\n    waitMessage() {\n        this.socket.on('message', (params) => {\n            switch (params.type) {\n                case 'run':\n                    var startDate = new Date()\n                    var data = eval(params.mapfuncstr);\n                    var time = (new Date().getTime() - startDate.getTime()) / 1000\n                        SocketService.getInstance().socket.emit('reduce', {\n                            id: params.id,\n                            data,\n                            meter: {\n                                time,\n                                appVersion: navigator.appVersion,\n                                deviceMemory: navigator.deviceMemory,\n                                hardwareConcurrency: navigator.hardwareConcurrency,\n                                platform: navigator.platform,\n                            }\n                        })\n                    break;\n                case 'info':\n                    SocketService.getInstance().socket.emit('info', {\n                        id: params.id,\n                        meter: {\n                            appVersion: navigator.appVersion,\n                            deviceMemory: navigator.deviceMemory,\n                            hardwareConcurrency: navigator.hardwareConcurrency,\n                            platform: navigator.platform,\n                        }\n                    })\n                    break;\n\n                default:\n                    break;\n            }\n        });\n    }\n    getSocket() {\n        return this.socket;\n    }\n    getSocketId() {\n        return this.socket.id;\n    }\n    getSocketConnected() {\n        return this.socket.connected;\n    }\n    getSocketDate() {\n        return this.socketDate;\n    }\n    getSocketName(name) {\n        return this.socketName;\n    }\n    setSocketName(name) {\n        this.socketName = name;\n        this.socket.emit('SetSocketName', this.socketName);\n        return this.socketName;\n    }\n}","export const COLLAPSE_MENU = 'COLLAPSE_MENU';\nexport const COLLAPSE_TOGGLE = 'COLLAPSE_TOGGLE';\nexport const FULL_SCREEN = 'FULL_SCREEN';\nexport const FULL_SCREEN_EXIT = 'FULL_SCREEN_EXIT';\nexport const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\nexport const NAV_CONTENT_LEAVE = 'NAV_CONTENT_LEAVE';\nexport const NAV_COLLAPSE_LEAVE = 'NAV_COLLAPSE_LEAVE';","import React from 'react';\nimport { withRouter } from 'react-router';\n\nclass ScrollToTop extends React.Component {\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0)\n        }\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react';\n\nconst SignUp1 = React.lazy(() => import('./Demo/Authentication/SignUp/SignUp1'));\nconst Signin1 = React.lazy(() => import('./Demo/Authentication/SignIn/SignIn1'));\n\nconst route = [\n    { path: '/auth/signup-1', exact: true, name: 'Signup 1', component: SignUp1 },\n    { path: '/auth/signin-1', exact: true, name: 'Signin 1', component: Signin1 }\n];\n\nexport default route;","import React, { Component, Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nimport '../../node_modules/font-awesome/scss/font-awesome.scss';\n\nimport Loader from './layout/Loader'\nimport Aux from \"../hoc/_Aux\";\nimport ScrollToTop from './layout/ScrollToTop';\nimport routes from \"../route\";\n\nconst AdminLayout = Loadable({\n    loader: () => import('./layout/AdminLayout'),\n    loading: Loader\n});\n\nclass App extends Component {\n    render() {\n        const menu = routes.map((route, index) => {\n          return (route.component) ? (\n              <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                      <route.component {...props} />\n                  )} />\n          ) : (null);\n        });\n\n        return (\n            <Aux>\n                <ScrollToTop>\n                    <Suspense fallback={<Loader/>}>\n                        <Switch>\n                            {menu}\n                            <Route path=\"/\" component={AdminLayout} />\n                        </Switch>\n                    </Suspense>\n                </ScrollToTop>\n            </Aux>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\nimport config from './../config';\n\nconst initialState = {\n    isOpen: [], //for active default menu\n    isTrigger: [], //for active default menu, set blank for horizontal\n    ...config,\n    isFullScreen: false, // static can't change\n};\n\nconst reducer = (state = initialState, action) => {\n    let trigger = [];\n    let open = [];\n\n    switch (action.type) {\n        case actionTypes.COLLAPSE_MENU:\n            return {\n                ...state,\n                collapseMenu: !state.collapseMenu\n            };\n        case actionTypes.COLLAPSE_TOGGLE:\n            if (action.menu.type === 'sub') {\n                open = state.isOpen;\n                trigger = state.isTrigger;\n\n                const triggerIndex = trigger.indexOf(action.menu.id);\n                if (triggerIndex > -1) {\n                    open = open.filter(item => item !== action.menu.id);\n                    trigger = trigger.filter(item => item !== action.menu.id);\n                }\n\n                if (triggerIndex === -1) {\n                    open = [...open, action.menu.id];\n                    trigger = [...trigger, action.menu.id];\n                }\n            } else {\n                open = state.isOpen;\n                const triggerIndex = (state.isTrigger).indexOf(action.menu.id);\n                trigger = (triggerIndex === -1) ? [action.menu.id] : [];\n                open = (triggerIndex === -1) ? [action.menu.id] : [];\n            }\n\n            return {\n                ...state,\n                isOpen: open,\n                isTrigger: trigger\n            };\n        case actionTypes.NAV_CONTENT_LEAVE:\n            return {\n                ...state,\n                isOpen: open,\n                isTrigger: trigger,\n            };\n        case actionTypes.NAV_COLLAPSE_LEAVE:\n            if (action.menu.type === 'sub') {\n                open = state.isOpen;\n                trigger = state.isTrigger;\n\n                const triggerIndex = trigger.indexOf(action.menu.id);\n                if (triggerIndex > -1) {\n                    open = open.filter(item => item !== action.menu.id);\n                    trigger = trigger.filter(item => item !== action.menu.id);\n                }\n                return {\n                    ...state,\n                    isOpen: open,\n                    isTrigger: trigger,\n                };\n            }\n            return {...state};\n        case actionTypes.FULL_SCREEN :\n            return {\n                ...state,\n                isFullScreen: !state.isFullScreen\n            };\n        case actionTypes.FULL_SCREEN_EXIT:\n            return {\n                ...state,\n                isFullScreen: false\n            };\n        case actionTypes.CHANGE_LAYOUT:\n            return {\n                ...state,\n                layout: action.layout\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\nimport config from './config';\nimport SocketService from '../src/store/services/SocketService'\n\nconst _socketService = SocketService.getInstance();\n_socketService.waitMessage()\n\nconst store = createStore(reducer);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={config.basename}>\n            {/* basename=\"/datta-able\" */}\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}