{"version":3,"sources":["App/layout/ScrollToTop/index.js","route.js","App/index.js","serviceWorker.js","store/reducer.js","index.js","config.js","App/layout/Loader/index.js","hoc/_Aux/index.js","store/services/SocketService.js","store/actions.js"],"names":["ScrollToTop","prevProps","this","props","location","window","scrollTo","children","React","Component","withRouter","route","path","exact","name","component","lazy","Promise","all","__webpack_require__","e","then","bind","AdminLayout","Loadable","loader","loading","Loader","App","menu","routes","map","index","react_default","a","createElement","Route","key","render","_Aux","layout_ScrollToTop","react","fallback","Switch","Boolean","hostname","match","initialState","Object","objectSpread","isOpen","isTrigger","config","isFullScreen","reducer","state","arguments","length","undefined","action","trigger","open","type","actionTypes","collapseMenu","triggerIndex","indexOf","id","filter","item","concat","toConsumableArray","layout","SocketService","getInstance","waitMessage","store","createStore","app","es","BrowserRouter","basename","src_App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","__webpack_exports__","defaultPath","preLayout","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","className","Aux","ENDPOINT","socket","io","socketDate","Date","socketName","on","params","startDate","data","eval","mapfuncstr","time","getTime","emit","meter","appVersion","deviceMemory","hardwareConcurrency","platform","connected","instance","d","COLLAPSE_MENU","COLLAPSE_TOGGLE","FULL_SCREEN","FULL_SCREEN_EXIT","CHANGE_LAYOUT","NAV_CONTENT_LEAVE","NAV_COLLAPSE_LEAVE"],"mappings":"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","file":"static/js/main.bf7c68bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ScrollToTop extends React.Component {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scrollTo(0, 0)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\n\r\nconst SignUp1 = React.lazy(() => import('./Demo/Authentication/SignUp/SignUp1'));\r\nconst Signin1 = React.lazy(() => import('./Demo/Authentication/SignIn/SignIn1'));\r\n\r\nconst route = [\r\n    { path: '/auth/signup-1', exact: true, name: 'Signup 1', component: SignUp1 },\r\n    { path: '/auth/signin-1', exact: true, name: 'Signin 1', component: Signin1 }\r\n];\r\n\r\nexport default route;","import React, { Component, Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nimport '../../node_modules/font-awesome/scss/font-awesome.scss';\n\nimport Loader from './layout/Loader'\nimport Aux from \"../hoc/_Aux\";\nimport ScrollToTop from './layout/ScrollToTop';\nimport routes from \"../route\";\n\nconst AdminLayout = Loadable({\n    loader: () => import('./layout/AdminLayout'),\n    loading: Loader\n});\n\nclass App extends Component {\n    render() {\n        const menu = routes.map((route, index) => {\n          return (route.component) ? (\n              <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                      <route.component {...props} />\n                  )} />\n          ) : (null);\n        });\n\n        return (\n            <Aux>\n                <ScrollToTop>\n                    <Suspense fallback={<Loader/>}>\n                        <Switch>\n                            {menu}\n                            <Route path=\"/\" component={AdminLayout} />\n                        </Switch>\n                    </Suspense>\n                </ScrollToTop>\n            </Aux>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\r\nimport config from './../config';\r\n\r\nconst initialState = {\r\n    isOpen: [], //for active default menu\r\n    isTrigger: [], //for active default menu, set blank for horizontal\r\n    ...config,\r\n    isFullScreen: false, // static can't change\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let trigger = [];\r\n    let open = [];\r\n\r\n    switch (action.type) {\r\n        case actionTypes.COLLAPSE_MENU:\r\n            return {\r\n                ...state,\r\n                collapseMenu: !state.collapseMenu\r\n            };\r\n        case actionTypes.COLLAPSE_TOGGLE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n\r\n                if (triggerIndex === -1) {\r\n                    open = [...open, action.menu.id];\r\n                    trigger = [...trigger, action.menu.id];\r\n                }\r\n            } else {\r\n                open = state.isOpen;\r\n                const triggerIndex = (state.isTrigger).indexOf(action.menu.id);\r\n                trigger = (triggerIndex === -1) ? [action.menu.id] : [];\r\n                open = (triggerIndex === -1) ? [action.menu.id] : [];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger\r\n            };\r\n        case actionTypes.NAV_CONTENT_LEAVE:\r\n            return {\r\n                ...state,\r\n                isOpen: open,\r\n                isTrigger: trigger,\r\n            };\r\n        case actionTypes.NAV_COLLAPSE_LEAVE:\r\n            if (action.menu.type === 'sub') {\r\n                open = state.isOpen;\r\n                trigger = state.isTrigger;\r\n\r\n                const triggerIndex = trigger.indexOf(action.menu.id);\r\n                if (triggerIndex > -1) {\r\n                    open = open.filter(item => item !== action.menu.id);\r\n                    trigger = trigger.filter(item => item !== action.menu.id);\r\n                }\r\n                return {\r\n                    ...state,\r\n                    isOpen: open,\r\n                    isTrigger: trigger,\r\n                };\r\n            }\r\n            return {...state};\r\n        case actionTypes.FULL_SCREEN :\r\n            return {\r\n                ...state,\r\n                isFullScreen: !state.isFullScreen\r\n            };\r\n        case actionTypes.FULL_SCREEN_EXIT:\r\n            return {\r\n                ...state,\r\n                isFullScreen: false\r\n            };\r\n        case actionTypes.CHANGE_LAYOUT:\r\n            return {\r\n                ...state,\r\n                layout: action.layout\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\nimport config from './config';\nimport SocketService from '../src/store/services/SocketService'\n\nconst _socketService = SocketService.getInstance();\n_socketService.waitMessage()\n\nconst store = createStore(reducer);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={config.basename}>\n            {/* basename=\"/datta-able\" */}\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\r\n    defaultPath: '/dashboard/default',\r\n    basename: '/mapandreduce', // only at build time to set, like /datta-able\r\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\r\n    preLayout: null, // (not available in lite version)\r\n    collapseMenu: false, // mini-menu\r\n    layoutType: 'menu-light', // menu-dark, (menu-light, dark are not available in lite version)\r\n    navIconColor: false,\r\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\r\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\r\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\r\n    navBackImage: false, // not available in lite version\r\n    rtlLayout: false, // not available in lite version\r\n    navFixedLayout: true,\r\n    headerFixedLayout: false, // not available in lite version\r\n    boxLayout: false,\r\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\r\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\r\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\r\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\r\n    navListTitleHide: false, // not available in lite version\r\n    configBlock: false, // not available in lite version\r\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\r\n    layout6BackSize : '', // used only for pre-layout = layout-6\r\n};\r\n","import React from 'react';\r\n\r\nconst loader = () => {\r\n    return (\r\n        <div className=\"loader-bg\">\r\n            <div className=\"loader-track\">\r\n                <div className=\"loader-fill\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default loader;","const Aux = (props) => props.children;\r\n\r\nexport default Aux;","\r\n\r\nimport io from 'socket.io-client';\r\nconst ENDPOINT = \"https://socketmapandreduce.herokuapp.com/\";\r\n\r\nexport default class SocketService {\r\n    static instance = null;\r\n    socket = io(ENDPOINT);\r\n    socketDate = new Date();\r\n    socketName = null;\r\n    static getInstance() {\r\n        if (SocketService.instance === null) {\r\n            SocketService.instance = new SocketService();\r\n        }\r\n        return this.instance;\r\n    }\r\n    waitMessage() {\r\n        this.socket.on('message', (params) => {\r\n            switch (params.type) {\r\n                case 'run':\r\n                    var startDate = new Date()\r\n                    var data = eval(params.mapfuncstr);\r\n                    var time = (new Date().getTime() - startDate.getTime()) / 1000\r\n                        SocketService.getInstance().socket.emit('reduce', {\r\n                            id: params.id,\r\n                            data,\r\n                            meter: {\r\n                                time,\r\n                                appVersion: navigator.appVersion,\r\n                                deviceMemory: navigator.deviceMemory,\r\n                                hardwareConcurrency: navigator.hardwareConcurrency,\r\n                                platform: navigator.platform,\r\n                            }\r\n                        })\r\n                    break;\r\n                case 'info':\r\n                    SocketService.getInstance().socket.emit('info', {\r\n                        id: params.id,\r\n                        meter: {\r\n                            appVersion: navigator.appVersion,\r\n                            deviceMemory: navigator.deviceMemory,\r\n                            hardwareConcurrency: navigator.hardwareConcurrency,\r\n                            platform: navigator.platform,\r\n                        }\r\n                    })\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    getSocket() {\r\n        return this.socket;\r\n    }\r\n    getSocketId() {\r\n        return this.socket.id;\r\n    }\r\n    getSocketConnected() {\r\n        return this.socket.connected;\r\n    }\r\n    getSocketDate() {\r\n        return this.socketDate;\r\n    }\r\n    getSocketName(name) {\r\n        return this.socketName;\r\n    }\r\n    setSocketName(name) {\r\n        this.socketName = name;\r\n        this.socket.emit('SetSocketName', this.socketName);\r\n        return this.socketName;\r\n    }\r\n}","export const COLLAPSE_MENU = 'COLLAPSE_MENU';\r\nexport const COLLAPSE_TOGGLE = 'COLLAPSE_TOGGLE';\r\nexport const FULL_SCREEN = 'FULL_SCREEN';\r\nexport const FULL_SCREEN_EXIT = 'FULL_SCREEN_EXIT';\r\nexport const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\r\nexport const NAV_CONTENT_LEAVE = 'NAV_CONTENT_LEAVE';\r\nexport const NAV_COLLAPSE_LEAVE = 'NAV_COLLAPSE_LEAVE';"],"sourceRoot":""}